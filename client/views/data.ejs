<!DOCTYPE html>
<html>

<head>
  <title>Data | Content Management System</title>
  <%include ./partials/head%>
  <style>
    .hidden {
      display: none !important
    }

    @media all and (min-width: 576px) {
      #searchFrequency {
        width: 180px;
      }
    }

    @media all and (max-width: 575px) {
      #searchFrequency {
        width: 100vh !important;
      }
    }
  </style>
</head>

<body class="privilege not-home" style="display: none">
  <%include ./partials/header%>
  <main role="main" class="mt-5 pt-5 mt-sm-5 pt-sm-2 pt-md-3 container">
    <div class="card border-light mx-1 mt-1">
      <div class="card-header bg-transparent justify-content-between row">
        <div class="col-auto">
          <h1>Data</h1>
        </div>
        <div class="col-auto">
          <a href="/pie" class="mx-2" style="color:dodgerblue;">
            <i class="fa fa-pie-chart fa-2x" aria-label="Pie chart" aria-hidden="false"></i>
          </a>
          <a href="/bar" class="mx-2" style="color: forestgreen;">
            <i class="fa fa-bar-chart fa-2x" aria-label="Bar chart" aria-hidden="false"></i>
          </a>
        </div>
      </div>
      <div class="card-body">
        <!-- add button, and pagination options -->
        <div class="row justify-content-between">
          <div class="col-12 col-sm-auto">
            <div class="row">
              <div class="col-12 col-sm-auto">
                <a role="button" class="btn btn-primary" href="" id="addButton">
                  <i class="fa fa-plus" aria-hidden="true"></i>Add
                </a>
              </div>
              <div class="col-12 my-2 my-sm-0 col-sm-auto">
                <form class="form-inline mx-2" id="add" style="display: none">
                  <input type="text" class="form-control mb-2 mr-sm-2" id="addLetter" placeholder="Letter" required>
                  <input type="number" class="form-control mb-2 mr-sm-2" id="addFrequency" placeholder="Frequency"
                    step="0.0001" required>
                  <button type="submit" class="btn btn-primary mb-2" id="saveLetter">Save</button>
                </form>
              </div>
            </div>
          </div>
          <div class="col-12 col-sm-auto my-1">
            <div class="row form-group">
              <div class="col-5 col-sm-auto" style="margin-right: -1.4rem !important">
                <select class="selectpicker form-control" id="selectLimit">
                  <option value="10" selected>10</option>
                  <option value="25">25</option>
                  <option value="50">50</option>
                  <option value="all">All</option>
                </select>
              </div>
              <div class="col-7 col-sm-auto my-auto rfs">Rows per page</div>
            </div>
          </div>
        </div>


        <div class="alert alert-success" id="alertData" style="display: none"></div>
        <div class="alert alert-danger" id="alertDataDanger" style="display: none"></div>

        <div class="row justify-content-between">
          <div class="col-12 col-sm-auto">
            <!-- SEARCH FORM -->
            <form class="form-inline">
              <input type="text" class="form-control mb-2 mr-sm-2" id="searchLetter" placeholder="Search letter"
                size="8">
              <input type="number" class="form-control mb-2 ml-sm-2" id="searchFrequency" placeholder="Search frequency"
                step="0.0001">
              <a href="" role="button" id="resetSearch" class="btn btn-danger mb-2 ml-sm-2">
                <i class="fa fa-undo" aria-hidden="true"></i>Reset
              </a>
            </form>
          </div>
          <div class="col-12 col-sm-auto">
            <!-- PAGINATION -->
            <nav id="pagination" aria-label="Table page" class="table-responsive mb-2">
              <ul class="pagination text-center" id="pages"></ul>
            </nav>
          </div>
        </div>

        <div class="card border-light my-1">
          <div class="card-body">
            <!-- TABLE -->
            <div class="table-responsive table-fix-head">
              <table class="table table-striped table-sm">
                <thead class="thead-dark">
                  <tr>
                    <th scope="col" class="th-sm">#</th>
                    <th scope="col" class="th-sm">Letter</th>
                    <th scope="col" class="th-sm">Frequency</th>
                    <th scope="col" class="th-sm">Actions</th>
                  </tr>
                </thead>
                <tbody id="data"></tbody>
              </table>
            </div>
            <!-- Group by option -->
            <div class="row">
              <div class="col-12 col-sm-2 form-inline">
                <div class="form-check">
                  <label for="groupBy" class="form-check-label" style="width: 8rem;"><b>Group by letter</b></label>
                  <input id="groupBy" class="form-check-input" value="letter" type="checkbox" data-toggle="toggle"
                    data-size="xs" data-onstyle="primary">
                </div>
              </div>
              <div class="col-12 col-sm-10 mt-4" id="freqOptions" style="display: none;">
                <div class="form-group">
                  <div class="row justify-content-center">
                    <label class="col-12 col-sm-3"><b>Frequency accumulator:</b></label>
                    <div class="col-12 col-sm-9 no-gutter" id="freqOpt"></div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    </div>
  </main>
  <% include ./partials/scripts %>
  <script type="text/javascript" src="/javascripts/user-privilege.js"></script>
  <script type="text/javascript" src="/javascripts/pagination.js"></script>
  <script type="text/javascript">
    $(() => {
      setActiveTab('dataTab');

      const showFreqOpt = () => {
        const options = [
          { value: 'maxFreq', label: 'Maximum' },
          { value: 'minFreq', label: 'Minimum' },
          { value: 'sumFreq', label: 'Sum' },
          { value: 'avgFreq', label: 'Average' },
          { value: 'countFreq', label: 'Count' }
        ];
        const width = screen.width;
        let divClass = "custom-control custom-radio custom-control-inline";
        if (width < 600) divClass += " col-6";
        options.forEach((opt, index) => {
          let radios = [
            `<div class="${divClass}">`,
            `<input type="radio" id="${opt.value}" name="freq" class="custom-control-input" value="${opt.value}">`,
            `<label class="custom-control-label" for="${opt.value}">${opt.label}</label>`,
            '</div>'
          ];
          $("#freqOpt").append(radios.join('\n'));
        });
        let acc = localStorage.getItem("Accumulator");
        if (acc && acc != '') $(`#${acc}`).prop('checked', true);
        else $("#sumFreq").prop("checked", true);
        $("#freqOptions").fadeIn();
        $("td:nth-child(4)").addClass('hidden');
        $("th:nth-child(4)").addClass('hidden');
      }

      const apiData = 'http://localhost:3001/api/data';

      const showData = (data, skip = 0, accumulator) => {
        let keys = ["letter", "frequency"];
        if (accumulator) keys[1] = accumulator;
        $("#data > tr").remove();
        let table = $("#data");

        data.forEach((item, index) => {
          table.append(`<tr id="row${index + skip + 1}"></tr>`)
          let row = $(`#row${index + skip + 1}`);
          row.append(`<td>${index + skip + 1}</td>`);
          keys.forEach(key => {
            let content = item[key];
            if (typeof content == 'number') content = Number(content.toPrecision(5))
            row.append(`<td>${content}</td>`);
          })
          if (!$("#groupBy").is(":checked")) {
            let actions = `<td>`;
            actions += `<a href="" role="button" class="edit btn btn-success mr-1" id="edit${item._id}"> <i class="fa fa-pencil-square-o" aria-hidden="true"></i></a>`;
            actions += `<a href="" role="button" class="delete btn btn-danger" id="delete${item._id}"> <i class="fa fa-trash" aria-hidden="true"></i></a>`;
            actions += `</td>`
            row.append(actions)
          }
        });

        $("a.edit").click(function (e) {
          e.preventDefault();
          let id = $(this).attr("id").slice(4);
          let $letterCell = $(this).parents().eq(1).children().eq(1);
          let $freqCell = $(this).parents().eq(1).children().eq(2);
          let $actionsCell = $(this).parents().eq(1).children().eq(3);
          let oldValues = {
            letter: $letterCell.text(),
            frequency: $freqCell.text(),
            actions: $actionsCell.html()
          }

          $letterCell.html(`<input type="text" class="form-control" value=${oldValues.letter}>`);
          $freqCell.html(`<input type="number" class="form-control" step="0.0001" value=${oldValues.frequency}>`);
          const actionOk = `<a href="" role="button" class="btn btn-success mr-1" id="ok${id}"> <i class="fa fa-check" aria-hidden="true"></i></a>`;
          const actionCancel = `<a href="" role="button" class="btn btn-danger" id="cancel${id}"> <i class="fa fa-ban" aria-hidden="true"></i></a>`;
          $actionsCell.html(actionOk + actionCancel);

          $(`#ok${id}`).click(function (e) {
            e.preventDefault();
            let letter = $letterCell.children().val();
            let frequency = $freqCell.children().val();
            if (letter == oldValues.letter && frequency == oldValues.frequency) {
              $("#alertDataDanger").html(`<b>Data have not been updated</b>`).show();
              setTimeout(() => {
                $("#alertDataDanger").hide(1000)
              }, 2000);
            } else {
              editData(id, letter, frequency);
            }
            $letterCell.text(letter);
            $freqCell.text(frequency);
            $actionsCell.html(oldValues.actions);
          });

          $(`#cancel${id}`).click(function (e) {
            e.preventDefault();
            $letterCell.text(oldValues.letter);
            $freqCell.text(oldValues.frequency);
            $actionsCell.html(oldValues.actions);
          });
        });

        $("a.delete").click(function (e) {
          e.preventDefault();
          const current = Number($("#pages > li.active > span").text() || 1);
          let id = $(this).attr("id").slice(6);
          if (confirm("Are you sure you want to delete this data?")) {
            deleteData(id, current);
          }
        });
      };

      const getData = (current, limit, groupBy, accumulator) => {
        let skip = limit == 'all' ? 0 : (current - 1) * limit;
        $.ajax({
          url: apiData,
          method: "GET",
          beforeSend: req => {
            req.setRequestHeader('Skip', skip);
            req.setRequestHeader('Limit', limit);
            if (groupBy) req.setRequestHeader('GroupBy', groupBy);
          }
        }).done(response => {
          showData(response.data, skip, accumulator);
          showPagination(current, response.numOfPages, getData, limit, groupBy, accumulator);
        });
      };

      const searchData = (current, limit, groupBy, accumulator, filter) => {
        let skip = limit == 'all' ? 0 : (current - 1) * limit;
        $.ajax({
          url: apiData + '/search',
          method: "POST",
          data: filter,
          dataType: "json",
          beforeSend: req => {
            req.setRequestHeader('Skip', skip);
            req.setRequestHeader('Limit', limit);
            if (groupBy) req.setRequestHeader('GroupBy', groupBy);
          }
        }).done(response => {
          showData(response.data, skip, accumulator);
          showPagination(current, response.numOfPages, searchData, limit, groupBy, accumulator, filter);
        });
      };

      const addData = limit => {
        const data = { letter: $("#addLetter").val(), frequency: $("#addFrequency").val() };
        $.ajax({
          url: apiData,
          method: "POST",
          data,
          dataType: "json"
        }).done(response => {
          $("#alertData").html(`<b>${response.message}</b>`).show();
          setTimeout(() => {
            $("#alertData").hide(1000)
          }, 3000);
          $("#searchLetter").val($("#addLetter").val());
          $("#searchFrequency").val($("#addFrequency").val());
          $("#addLetter").val("");
          $("#addFrequency").val("");
          handleEvents();
        });
      }

      const editData = (id, letter = '', frequency = '') => {
        $.ajax({
          url: apiData + `/${id}`,
          method: "PUT",
          data: { letter, frequency: Number(frequency) },
          dataType: "json"
        }).done(response => {
          $("#alertData").html(`<b>${response.message}</b>`).show();
          setTimeout(() => {
            $("#alertData").hide(1000)
          }, 2000);
        });
      }

      const deleteData = (id, current) => {
        $.ajax({
          url: apiData + `/${id}`,
          method: "DELETE"
        }).done(response => {
          $("#alertData").html(`<b>${response.message}</b>`).show();
          setTimeout(() => {
            $("#alertData").hide(1000)
          }, 3000);
          let { limit, groupBy, accumulator, filter } = generateOptValues($searchLetter.val(), $searchFrequency.val());
          searchData(current, limit, groupBy, accumulator, filter);
        });
      };

      const $elGroupBy = $("#groupBy");
      const $selectLimit = $("#selectLimit");
      const $searchLetter = $("#searchLetter");
      const $searchFrequency = $("#searchFrequency");
      getData(1, $selectLimit.val());

      const generateFilter = (letter = '', frequency = '', groupBy, accumulator) => {
        let filter = {};
        if (letter.length > 0) {
          if (groupBy) filter._id = { $regex: letter, $options: "i" };
          else filter.letter = { $regex: letter, $options: "i" };
        }

        if (frequency.length > 0) {
          if (groupBy) filter[accumulator] = Number(frequency);
          else filter.frequency = Number(frequency);
        }
        return JSON.stringify(filter);
      };

      const generateOptValues = (letter = '', frequency = '') => {
        let groupBy = $elGroupBy.is(":checked") ? $elGroupBy.val() : undefined;
        const checked = $(`[name="freq"]`).toArray().filter(item => item.checked)[0];
        let accumulator = checked ? checked.getAttribute("value") : undefined;
        let filter = generateFilter(letter, frequency, groupBy, accumulator);
        return { limit: $selectLimit.val(), groupBy, accumulator, filter };
      }

      const handleEvents = () => {
        let { limit, groupBy, accumulator, filter } = generateOptValues($searchLetter.val(), $searchFrequency.val());
        // send groupBy and accumulator to local storage in order to it can be accessed by bar chart and pie chart
        localStorage.setItem('Group By', groupBy || 'letter');
        localStorage.setItem('Accumulator', accumulator || 'sumFreq');
        searchData(1, limit, groupBy, accumulator, filter);
      };

      $elGroupBy.change(() => {
        if ($elGroupBy.is(":checked")) showFreqOpt();
        else {
          $("#freqOptions").fadeOut();
          $(".custom-control-inline").remove();
          $("td:nth-child(4)").removeClass('hidden');
          $("th:nth-child(4)").removeClass('hidden');
        }
        handleEvents();
      });

      $(`#freqOpt`).change(handleEvents);
      $selectLimit.change(handleEvents);
      $searchLetter.keyup(handleEvents);
      $searchFrequency.keyup(handleEvents);

      $("#resetSearch").click(e => {
        e.preventDefault();
        $searchLetter.val("");
        $searchFrequency.val("");
        handleEvents();
      });

      $("#addButton").click(e => {
        e.preventDefault();
        $("#add").slideToggle();
      })

      $("#add").submit(e => {
        e.preventDefault();
        $elGroupBy.prop('checked', false);
        $("#freqOptions").fadeOut();
        $(".custom-control-inline").remove();
        $("td:nth-child(4)").removeClass('hidden');
        $("th:nth-child(4)").removeClass('hidden');
        addData($selectLimit.val());
      });

      setInterval(() => {
        if (screen.width < 350) {
          $("td > .btn").addClass("btn-sm");
          $("td > a > .fa").addClass("fa-xs").removeClass("fa-sm");
        } else if (screen.width < 600) {
          $("td > .btn").addClass("btn-sm");
          $("td > a > .fa").addClass("fa-sm").removeClass("fa-xs");
        } else {
          $("td > .btn").removeClass("btn-sm");
          $("td > a > .fa").removeClass("fa-sm").removeClass("fa-xs");
        }
      }, 100)
    })
  </script>
</body>

</html>